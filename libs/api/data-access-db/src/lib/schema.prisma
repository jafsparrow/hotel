generator client {
    provider = "prisma-client-js"
    // output   = "../../../generated-db-types/src"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model user {
    id                Int         @id @default(autoincrement())
    username          String      @unique
    password          Int
    name              String?
    phone             String?
    isAdmin           Boolean     @default(false)
    isCashier         Boolean     @default(false)
    isWaiter          Boolean     @default(true)
    isKitchenUser     Boolean     @default(false)
    // userCreatedOrders Order[]     @relation("createdUser")
    // createdForOrders  Order[]     @relation("createdForUser")
    orders            order[]
    createdOrderItems orderItem[] @relation("createdUser")
    kots              kot[]
}

model product {
    id                    Int        @id @default(autoincrement())
    name                  String
    secondaryLanguageName String?
    price                 Float
    cost                  Float
    image                 String     @default("")
    inStock               Boolean    @default(true)
    hasVariant            Boolean    @default(false)
    hasModifiers          Boolean    @default(false)
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt
    isArchived            Boolean    @default(false)
    collection            collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId          Int

    category      category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId    Int
    variants      variant[]
    modifierGroup modifierGroup[]
}

model category {
    id   Int    @id @default(autoincrement())
    name String

    color             String
    kitchenId         Int
    kitchen           kitchen   @relation(fields: [kitchenId], references: [id])
    isAvailableAllDay Boolean   @default(true)
    startTime         String    @default("")
    endTime           String    @default("")
    products          product[]
}

model collection {
    id       Int       @id @default(autoincrement())
    name     String
    products product[]
}

model kitchen {
    id         Int        @id @default(autoincrement())
    name       String
    printer    String
    kots       kot[]
    categories category[]
}

model variant {
    id        Int     @id @default(autoincrement())
    name      String
    price     Float
    productId Int
    product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model modifier {
    id              Int            @id @default(autoincrement())
    name            String
    price           Float
    modifierGroup   modifierGroup? @relation(fields: [modifierGroupId], references: [id])
    modifierGroupId Int?
}

model modifierGroup {
    id                    Int        @id @default(autoincrement())
    description           String?
    price                 Float?
    image                 String?
    printName             String?
    printModifiersAsItems Boolean    @default(false)
    modifiers             modifier[]
    product               product    @relation(fields: [productId], references: [id])
    productId             Int
}

model order {
    id            Int         @id @default(autoincrement())
    orderNumber   Int         @unique()
    paymentStatus String
    orderStatus   String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    orderItems    orderItem[]
    tableId       Int?
    table         table?      @relation(fields: [tableId], references: [id])
    createdUserId Int
    orderType     String
    customerName  String
    // createdUserId   Int
    // createForUserId Int
    // createdUser     User        @relation("createdUser", fields: [createdUserId], references: [id], onDelete: Cascade)
    // createdFor      User        @relation("createdForUser", fields: [createForUserId], references: [id], onDelete: Cascade)
    user          user        @relation(fields: [createdUserId], references: [id])
}

model orderItem {
    id            Int     @id @default(autoincrement())
    customeKey    String
    name          String
    kotNumber     Int
    Kot           kot?    @relation(fields: [kotNumber], references: [id])
    orderId       Int
    order         order   @relation(fields: [orderId], references: [id])
    createdUser   user?   @relation("createdUser", fields: [userId], references: [id])
    userId        Int?
    status        String?
    orderItemType String  @default("new")
    count         Int
    modifiers     String  @default("")
}

model kot {
    id            Int         @id @default(autoincrement())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    updatedUserId Int?
    updatedUser   user?       @relation(fields: [updatedUserId], references: [id])
    orderItems    orderItem[]

    kitchenId Int?
    Kitchen   kitchen? @relation(fields: [kitchenId], references: [id])
}

model company {
    id              Int     @id @default(autoincrement())
    name            String
    arabic          String
    logoUrl         String
    lastOrderNumber Int
    caption         String
    footer          String
    currencyCode    String
    address         String
    lat             String? @default("")
    long            String? @default("")
    taxes           tax[]
}

model tax {
    id           Int     @id @default(autoincrement())
    name         String
    printName    String
    isPercentage Boolean @default(true)
    value        Float

    company   company? @relation(fields: [companyId], references: [id])
    companyId Int?
}

model table {
    id        Int     @id @default(autoincrement())
    name      String
    capcacity Int?
    order     order[]
}
