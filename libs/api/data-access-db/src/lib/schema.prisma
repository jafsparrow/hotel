generator client {
    provider = "prisma-client-js"
    // output   = "../../../generated-db-types/src"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id            Int         @id @default(autoincrement())
    username      String      @unique
    password      Int
    name          String?
    phone         String?
    isAdmin       Boolean     @default(false)
    isCashier     Boolean     @default(false)
    isWaiter      Boolean     @default(true)
    isKitchenUser Boolean     @default(false)
    orders        Order[]
    OrderItem     OrderItem[]
}

model Product {
    id                    Int        @id @default(autoincrement())
    name                  String
    secondaryLanguageName String?
    price                 Float
    cost                  Float
    image                 String     @default("")
    inStock               Boolean    @default(true)
    hasVariant            Boolean    @default(false)
    hasModifiers          Boolean    @default(false)
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt
    isArchived            Boolean    @default(false)
    collection            Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId          Int

    category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId Int
    Variant    Variant[]
    Modifier   Modifier[]
}

model Category {
    id   Int    @id @default(autoincrement())
    name String

    color             String
    kitchenId         Int
    kitchen           Kitchen   @relation(fields: [kitchenId], references: [id])
    isAvailableAllDay Boolean   @default(true)
    startTime         String    @default("")
    endTime           String    @default("")
    products          Product[]
}

model Collection {
    id       Int       @id @default(autoincrement())
    name     String
    products Product[]
}

model Kitchen {
    id       Int        @id @default(autoincrement())
    name     String
    printer  String
    Category Category[]
}

model Variant {
    id        Int     @id @default(autoincrement())
    name      String
    price     Float
    productId Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Modifier {
    id        Int     @id @default(autoincrement())
    name      String
    price     Float
    productId Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
    id            Int         @id @default(autoincrement())
    orderNumber   Int         @unique()
    paymentStatus String
    orderStatus   String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    OrderItem     OrderItem[]
    userId        Int
    createdUser   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
    id        Int    @id @default(autoincrement())
    name      String
    kotNumber Int
    orderId   Int
    Order     Order  @relation(fields: [orderId], references: [id])
    User      User?  @relation(fields: [userId], references: [id])
    userId    Int?
}

model Company {
    id              Int     @id @default(autoincrement())
    name            String
    arabic          String
    logoUrl         String
    lastOrderNumber Int
    caption         String
    footer          String
    currencyCode    String
    address         String
    lat             String? @default("")
    long            String? @default("")
    taxes           Tax[]
}

model Tax {
    id           Int     @id @default(autoincrement())
    name         String
    printName    String
    isPercentage Boolean @default(true)
    value        Float

    Company   Company? @relation(fields: [companyId], references: [id])
    companyId Int?
}
